-- TASK 17

SELECT c.nickname "Hunts in the field",c.mice_ration "Ration of mice",b.name "Band"
FROM Cats c
INNER JOIN Bands b
ON  c.band_no = b.Band_no
WHERE c.mice_ration > 40 
AND (b.site = 'FIELD' OR b.site = 'WHOLE AREA')
ORDER BY c.mice_ration DESC;

-- TASK 18

SELECT c1.name, c1.in_herd_since "Hunts since"
FROM Cats c1 INNER JOIN Cats c2
ON c2.name = 'JACEK'
WHERE c1.in_herd_since < c2.in_herd_since
ORDER BY c1.in_herd_since DESC;

-- TASK 19(in taks description it is not fully connect since the first chief is not mentioned)

--a

SELECT c1.name,c1.function "Function",c2.name "Chief 1",
    c3.name "Chief 2",
    c4.name "Chief 3"
FROM Cats c1
LEFT JOIN (
    Cats c2 LEFT JOIN 
    (
    	Cats c3 LEFT JOIN Cats c4 
    	ON c3.chief = c4.nickname)
    ON c2.chief = c3.nickname)
    ON c1.chief = c2.nickname
WHERE c1.function = 'CAT' OR c1.function = 'NICE';


--b
SELECT *
FROM
(
  SELECT CONNECT_BY_ROOT name "Name", name, CONNECT_BY_ROOT function "Function", LEVEL "L"
  FROM Cats
  CONNECT BY PRIOR chief = nickname
  START WITH function IN ('CAT', 'NICE')
) 
	PIVOT (
   MIN(name) FOR L IN (2 chief1, 3 chief2, 4 chief3) 
);  

-- c

SELECT
  name,
  function,
  RTRIM(
    REVERSE(
      RTRIM(
        SYS_CONNECT_BY_PATH(REVERSE(name), ' | ')
        , name
      )
    )
    , '| '
  ) "Names of subsequent chiefs"
FROM
  Cats
WHERE
  function = 'CAT' OR function = 'NICE'
CONNECT BY
  PRIOR nickname = chief
START WITH
  chief IS NULL;


-- TASK 20
SELECT c.name "Name of female cat", b.name "Band name", i.enemy_name "Enemy name", e.hostility_degree "Enemy rating",i.incident_date "Incident date."
FROM Incidents i
INNER JOIN Cats c 
ON i.nickname = c.nickname
INNER JOIN Bands b
ON c.band_no = b.band_no
INNER JOIN Enemies e
ON i.enemy_name = e.enemy_name
WHERE c.gender = 'W'
AND i.incident_date > '2007-01-01';

-- TASK 21
SELECT b.name "Band name",COUNT(DISTINCT i.enemy_name) "Cats with enemies "
FROM Incidents i
INNER JOIN Enemies e
ON i.enemy_name = e.enemy_name
INNER JOIN Cats c
ON i.nickname = c.nickname
INNER JOIN Bands b
ON c.band_no = b.band_no
GROUP BY b.name;

-- TASK 22
SELECT c.function "Function",c.nickname "Nickname of cat",COUNT(*) "Number of enemies"
FROM Cats c
INNER JOIN Incidents i
ON i.nickname = c.nickname
GROUP BY c.function,c.nickname
HAVING COUNT(*) > 1;

-- TASK 23
SELECT name, 12 * (mice_ration + NVL(mice_extra, 0)) "Annual dose", 'below 864' "Dose"
FROM Cats
WHERE mice_extra IS NOT NULL
      AND 12 * (mice_ration + NVL(mice_extra, 0)) < 864

UNION ALL
    
SELECT name, 12 * (mice_ration + NVL(mice_extra, 0)) "Annual dose", '864' "Dose"
FROM Cats
WHERE mice_extra IS NOT NULL
      AND 12 * (mice_ration + NVL(mice_extra, 0)) = 864

UNION ALL

SELECT name, 12 * (mice_ration + NVL(mice_extra, 0)) "Annual dose", 'above 864' "Dose"
FROM Cats
WHERE mice_extra IS NOT NULL
      AND 12 * (mice_ration + NVL(mice_extra, 0)) > 864
ORDER BY 2 DESC; -- Orders by column number 2


-- TASK 24
	-- without subqueries and set operators
SELECT b.Band_no, b.name, b.site
FROM Bands b
LEFT JOIN Cats c
ON b.Band_no = c.Band_no
WHERE c.name is NULL;

	--using set operators
SELECT b.Band_no,b.name,b.site
FROM Bands b

MINUS 
SELECT DISTINCT c.band_no, b.name,b.site
FROM Bands b
INNER JOIN Cats c
ON b.band_no = c.band_no;

-- modified
SELECT b.Band_no, b.name, b.site
FROM Bands b
WHERE b.site IN (
    SELECT b.site
    FROM Bands b
    MINUS
    SELECT b.site
    FROM Bands b
    INNER JOIN Cats c ON b.band_no = c.band_no
)
OR b.site = 'WHOLE AREA';

-- because there is unique constraint on site column
ALTER TABLE Bands 
DROP CONSTRAINT SYS_C00141274373;

INSERT INTO Bands 
VALUES 
(10,'KAISEN','FARM','TIGER');


SELECT b.Band_no, b.name, b.site
FROM Bands b
WHERE b.site IN (
    SELECT b.site
    FROM Bands b
    MINUS
    SELECT b.site
    FROM Bands b
    INNER JOIN Cats c ON b.band_no = c.band_no
)
OR b.site = 'WHOLE AREA';

ROLLBACK;