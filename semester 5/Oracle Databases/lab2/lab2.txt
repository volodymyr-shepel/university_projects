-- TASK 17

SELECT c.nickname "Hunts in the field",c.mice_ration "Ration of mice",b.name "Band"
FROM Cats c
INNER JOIN Bands b
ON  c.band_no = b.Band_no
WHERE c.mice_ration > 50 
AND (b.site = 'FIELD' OR b.site = 'WHOLE AREA')
ORDER BY c.mice_ration DESC;



-- TASK 18

SELECT c1.name, c1.in_herd_since "Hunts since"
FROM Cats c1 INNER JOIN Cats c2
ON c2.name = 'JACEK'
WHERE c1.in_herd_since < c2.in_herd_since
ORDER BY c1.in_herd_since DESC;


-- TASK 19(in taks description it is not fully connect since the first chief is not mentioned)

--a

SELECT c1.name,c1.function "Function",c2.name "Chief 1",
    c3.name "Chief 2",
    c4.name "Chief 3"
FROM Cats c1
LEFT JOIN (
    Cats c2 LEFT JOIN 
    (
    	Cats c3 LEFT JOIN Cats c4 
    	ON c3.chief = c4.nickname)
    ON c2.chief = c3.nickname)
    ON c1.chief = c2.nickname
WHERE c1.function = 'CAT' OR c1.function = 'NICE';


--b
SELECT *
FROM
(
  SELECT CONNECT_BY_ROOT name "Name", name, CONNECT_BY_ROOT function "Function", LEVEL "L"
  FROM Cats
  CONNECT BY PRIOR chief = nickname
  START WITH function IN ('CAT', 'NICE')
) 
	PIVOT (
   MIN(name) FOR L IN (2 chief1, 3 chief2, 4 chief3) 
);  

-- c

SELECT
  name,
  function,
  RTRIM(
    REVERSE(
      RTRIM(
        SYS_CONNECT_BY_PATH(REVERSE(name), ' | ')
        , name
      )
    )
    , '| '
  ) "Names of subsequent chiefs"
FROM
  Cats
WHERE
  function = 'CAT' OR function = 'NICE'
CONNECT BY
  PRIOR nickname = chief
START WITH
  chief IS NULL;


-- TASK 20
SELECT c.name "Name of female cat", b.name "Band name", i.enemy_name "Enemy name", e.hostility_degree "Enemy rating",i.incident_date "Incident date."
FROM Incidents i
INNER JOIN Cats c 
ON i.nickname = c.nickname
INNER JOIN Bands b
ON c.band_no = b.band_no
INNER JOIN Enemies e
ON i.enemy_name = e.enemy_name
WHERE c.gender = 'W'
AND i.incident_date > '2007-01-01';

-- TASK 21
SELECT b.name "Band name",COUNT(DISTINCT i.enemy_name) "Cats with enemies ",
FROM Incidents i
INNER JOIN Enemies e
ON i.enemy_name = e.enemy_name
INNER JOIN Cats c
ON i.nickname = c.nickname
INNER JOIN Bands b
ON c.band_no = b.band_no
GROUP BY b.name;


-- TASK 22
SELECT c.function "Function",c.nickname "Nickname of cat",COUNT(*) "Number of enemies"
FROM Cats c
INNER JOIN Incidents i
ON i.nickname = c.nickname
GROUP BY c.function,c.nickname
HAVING COUNT(*) > 1;

-- TASK 23
SELECT name, 12 * (mice_ration + NVL(mice_extra, 0)) "Annual dose", 'below 864' "Dose"
FROM Cats
WHERE mice_extra IS NOT NULL
      AND 12 * (mice_ration + NVL(mice_extra, 0)) < 864

UNION ALL
    
SELECT name, 12 * (mice_ration + NVL(mice_extra, 0)) "Annual dose", '864' "Dose"
FROM Cats
WHERE mice_extra IS NOT NULL
      AND 12 * (mice_ration + NVL(mice_extra, 0)) = 864

UNION ALL

SELECT name, 12 * (mice_ration + NVL(mice_extra, 0)) "Annual dose", 'above 864' "Dose"
FROM Cats
WHERE mice_extra IS NOT NULL
      AND 12 * (mice_ration + NVL(mice_extra, 0)) > 864
ORDER BY 2 DESC; -- Orders by column number 2


-- TASK 24
	-- without subqueries and set operators
SELECT b.Band_no, b.name, b.site
FROM Bands b
LEFT JOIN Cats c
ON b.Band_no = c.Band_no
WHERE c.name is NULL;

	--using set operators
SELECT b.Band_no,b.name,b.site
FROM Bands b

MINUS 
SELECT DISTINCT c.band_no, b.name,b.site
FROM Bands b
INNER JOIN Cats c
ON b.band_no = c.band_no;


-- TASK 25

-- with max
SELECT c.name, c.function, c.mice_ration
FROM Cats c
INNER JOIN Bands b ON c.band_no = b.band_no
WHERE c.mice_ration >= 3 * (
    SELECT MAX(orchard_column)
    FROM (
        SELECT c.mice_ration AS orchard_column
        FROM Cats c
        INNER JOIN Bands b ON c.band_no = b.band_no
        WHERE b.site IN ('ORCHARD','WHOLE AREA')
    	AND c.function = 'NICE'
    )
);

-- without max
SELECT c.name, c.function, c.mice_ration 
FROM Cats c
INNER JOIN Bands b ON c.band_no = b.band_no
WHERE c.mice_ration >= ALL(SELECT 3 * c.mice_ration AS orchard_column -- USED TO CHECK IF CONDITION IS TRU FOR EVERY ROW
        FROM Cats c
        INNER JOIN Bands b ON c.band_no = b.band_no
        WHERE b.site IN ('ORCHARD','WHOLE AREA')
    	AND c.function = 'NICE');

-- Task 26
SELECT
    function "Function",
    CEIL(average_mice) AS "Average min and max mice"
FROM (
    SELECT
        c.function,
        AVG(NVL(c.mice_ration, 0) + NVL(c.mice_extra, 0)) AS average_mice
    FROM
        Cats c
    WHERE
        c.function <> 'BOSS'
    GROUP BY
        c.function
)
WHERE
    average_mice = (SELECT MAX(average_mice) FROM (SELECT AVG(NVL(c.mice_ration, 0) + NVL(c.mice_extra, 0)) AS average_mice FROM Cats c WHERE c.function <> 'BOSS' GROUP BY c.function))
    OR
    average_mice = (SELECT MIN(average_mice) FROM (SELECT AVG(NVL(c.mice_ration, 0) + NVL(c.mice_extra, 0)) AS average_mice FROM Cats c WHERE c.function <> 'BOSS' GROUP BY c.function));


-- TASK 27

-- a
SELECT c.nickname, c.mice_ration + NVL(c.mice_extra,0) "EATS"
FROM Cats c
WHERE c.mice_ration + NVL(c.mice_extra,0) IN (SELECT DISTINCT mice_ration + NVL(mice_extra, 0) AS total_mice
FROM Cats
ORDER BY total_mice DESC
FETCH FIRST 6 ROWS ONLY)
ORDER BY "EATS" DESC;
-- b

SELECT c.nickname, c.mice_ration + NVL(c.mice_extra,0) "EATS"
FROM Cats c
WHERE c.mice_ration + NVL(c.mice_extra,0) IN (
    SELECT total_mice FROM(
        SELECT DISTINCT mice_ration + NVL(mice_extra, 0) AS total_mice
    	FROM Cats
    	ORDER BY total_mice DESC
    )
	WHERE ROWNUM <= 6
)
ORDER BY "EATS" DESC;

-- c

SELECT c1.nickname,MAX(c1.mice_ration + NVL(c1.mice_extra,0)) "EATS"
FROM Cats c1 LEFT JOIN Cats c2
ON c1.mice_ration + NVL(c1.mice_extra,0) <= c2.mice_ration + NVL(c2.mice_extra,0)
GROUP BY c1.nickname
HAVING count(DISTINCT c2.mice_ration + NVL(c2.mice_extra,0)) <= 6
ORDER BY "EATS" DESC;


--TASK 28 
SELECT TO_CHAR(YEAR), SUM
FROM
(
  SELECT YEAR, SUM, ABS(SUM-AVG) "DIFF"
  FROM
    (
      SELECT EXTRACT(YEAR FROM in_herd_since) "YEAR", COUNT(EXTRACT(YEAR FROM in_herd_since)) "SUM"
      FROM Cats
      GROUP BY EXTRACT(YEAR FROM in_herd_since)
    ) JOIN (
      SELECT AVG(COUNT(EXTRACT(YEAR FROM in_herd_since))) "AVG"
      FROM Cats
      GROUP BY EXTRACT(YEAR FROM in_herd_since)
    ) ON SUM < AVG
)
WHERE DIFF < ALL
(
  SELECT MAX(ABS(SUM-AVG)) "DIFF"
  FROM
    (
      SELECT EXTRACT(YEAR FROM in_herd_since) "YEAR", COUNT(EXTRACT(YEAR FROM in_herd_since)) "SUM"
      FROM Cats
      GROUP BY EXTRACT(YEAR FROM in_herd_since)
    ) JOIN (
      SELECT AVG(COUNT(EXTRACT(YEAR FROM in_herd_since))) "AVG"
      FROM Cats
      GROUP BY EXTRACT(YEAR FROM in_herd_since)
    ) ON SUM < AVG
)

UNION ALL

SELECT 'Average', ROUND(AVG(COUNT(EXTRACT(YEAR FROM in_herd_since))), 7) "AVG"
FROM Cats
GROUP BY EXTRACT(YEAR FROM in_herd_since)

UNION ALL

SELECT TO_CHAR(YEAR), SUM
FROM
(
  SELECT YEAR, SUM, ABS(SUM-AVG) "DIFF"
  FROM
    (
      SELECT EXTRACT(YEAR FROM in_herd_since) "YEAR", COUNT(EXTRACT(YEAR FROM in_herd_since)) "SUM"
      FROM Cats
      GROUP BY EXTRACT(YEAR FROM in_herd_since)
    ) JOIN (
      SELECT AVG(COUNT(EXTRACT(YEAR FROM in_herd_since))) "AVG"
      FROM Cats
      GROUP BY EXTRACT(YEAR FROM in_herd_since)
    ) ON SUM > AVG
)
WHERE DIFF < ALL
(
  SELECT MAX(ABS(SUM-AVG)) "DIFF"
  FROM
    (
      SELECT EXTRACT(YEAR FROM in_herd_since) "YEAR", COUNT(EXTRACT(YEAR FROM in_herd_since)) "SUM"
      FROM Cats
      GROUP BY EXTRACT(YEAR FROM in_herd_since)
    ) JOIN  (
      SELECT AVG(COUNT(EXTRACT(YEAR FROM in_herd_since))) "AVG"
      FROM Cats
      GROUP BY EXTRACT(YEAR FROM in_herd_since)
    ) ON SUM > AVG
);


-- TASK 29
-- a
SELECT
c1.name	 "NAME",
MAX(NVL(c1.mice_ration,0) + NVL(c1.mice_extra, 0))	"EATS",
MAX(c1.band_no)	 "BAND NO",
TO_CHAR(AVG(NVL(c2.mice_ration, 0) + NVL(c2.mice_extra, 0)), '99.00')	 "AVG"
FROM Cats c1
INNER JOIN Cats c2 ON c1.band_no = c2.band_no
WHERE c1.gender = 'M'
GROUP BY c1.name
HAVING MAX(NVL(c1.mice_ration,0) + NVL(c1.mice_extra,0)) < AVG(NVL(c2.mice_ration,0) + NVL(c2.mice_extra,0))
ORDER BY "AVG";

-- in example it is using band_no but in task description it should be count

--b

SELECT c1.name,c1.mice_ration + NVL(c1.mice_extra,0) "EATS",stats.count "BAND NO",TO_CHAR(average,'99.99') "AVERAGE IN BAND"
FROM Cats c1 INNER JOIN(SELECT band_no,COUNT(*) AS count,AVG(mice_ration + NVL(mice_extra,0)) AS average FROM Cats GROUP BY band_no) stats
ON c1.band_no = stats.band_no
WHERE c1.mice_ration + NVL(c1.mice_extra,0) < stats.average
AND c1.gender = 'M'

--c 
SELECT name, mice_ration + NVL(mice_extra, 0) "EATS", band_no, 
  TO_CHAR(
    (SELECT AVG(mice_ration + NVL(mice_extra, 0)) AS average 
    FROM Cats c 
    WHERE Cats.band_no = c.band_no), '99.99') "AVERAGE IN BAND"

FROM Cats
WHERE gender = 'M'
AND mice_ration + NVL(mice_extra, 0) < (
    SELECT AVG(mice_ration + NVL(mice_extra, 0)) AS average 
    FROM Cats c WHERE Cats.band_no= c.band_no);


-- TASK 30

SELECT c.name, c.in_herd_since "JOIN THE HERD",'<--- SHORTEST TIME IN THE BAND' || b.name " "
FROM Cats c INNER JOIN Bands b
ON c.band_no = b.band_no
WHERE c.in_herd_since >= ALL(SELECT c1.in_herd_since FROM Cats c1 WHERE c.band_no = c1.band_no)

UNION ALL

SELECT c.name, c.in_herd_since "JOIN THE HERD",'<--- LONGEST TIME IN THE BAND' || b.name
FROM Cats c INNER JOIN Bands b
ON c.band_no = b.band_no
WHERE c.in_herd_since <= ALL(SELECT c1.in_herd_since FROM Cats c1 WHERE c.band_no = c1.band_no)

UNION ALL

SELECT c.name, c.in_herd_since "JOIN THE HERD",' '
FROM Cats c INNER JOIN Bands b
ON c.band_no = b.band_no
WHERE c.in_herd_since < ANY(SELECT c1.in_herd_since FROM Cats c1 WHERE c.band_no = c1.band_no)
AND
c.in_herd_since > ANY(SELECT c1.in_herd_since FROM Cats c1 WHERE c.band_no = c1.band_no)

ORDER BY 1;

-- TASK 31
CREATE VIEW bands_stats AS
SELECT b.name "BAND_NAME",AVG(c.mice_ration) "AVG_CONS",MAX(c.mice_ration) "MAX_CONS",MIN(c.mice_ration) "MIN_CONS",COUNT(*) "CAT",
    COUNT(CASE WHEN c.mice_extra IS NOT NULL THEN 1 END) AS "CAT_WITH_EXTRA"
FROM Cats c 
INNER JOIN Bands b
ON c.band_no = b.band_no
GROUP BY b.name


SELECT c.nickname,c.name,c.function,c.mice_ration + NVL(c.mice_extra,0) "EATS",'OD ' || bands_stats.MIN_CONS || ' DO ' || bands_stats.MAX_CONS "CONSUMPTION LIMITS",
    c.in_herd_since "HUNTS FROM"
FROM Cats c
INNER JOIN Bands b
ON c.band_no = b.band_no
INNER JOIN bands_stats
ON b.name = bands_stats.BAND_NAME
WHERE c.nickname = 'CAKE'

--The CASE WHEN c.mice_extra IS NOT NULL THEN 1 END creates a conditional expression. It evaluates to 1 when c.mice_extra is not null and null otherwise.
--The COUNT function then counts the number of non-null values generated by the CASE expression. 
--The COUNT function only increments the count when the expression evaluates to a non-null value.


-- TASK 32
CREATE VIEW longest_memberships AS
SELECT c.nickname, c.gender, c.mice_ration,mice_extra,band_no
FROM Cats c
WHERE c.nickname IN(
    SELECT c1.nickname 
    FROM Cats c1
    INNER JOIN Bands b1
	ON c1.band_no = b1.band_no
    WHERE b1.name = 'BLACK KNIGHTS' 
    ORDER BY c1.in_herd_since
    FETCH FIRST 3 ROWS ONLY
)
OR 
c.nickname IN(
    SELECT c1.nickname 
    FROM Cats c1
    INNER JOIN Bands b1
	ON c1.band_no = b1.band_no
    WHERE b1.name = 'PINTO HUNTERS' 
    ORDER BY c1.in_herd_since
    FETCH FIRST 3 ROWS ONLY
)

DROP VIEW longest_memberships;

-- BEFORE 
SELECT nickname, gender, mice_ration "Mice before pay increase",NVL(mice_extra,0) "Extra before pay increase"
FROM longest_memberships;

UPDATE longest_memberships
SET mice_ration = mice_ration + DECODE(gender,'W', 0.1 * (SELECT MIN(mice_ration) FROM Cats),10),
mice_extra = NVL(mice_extra, 0) + 0.15 * (SELECT AVG(NVl(mice_extra, 0)) FROM Cats c WHERE band_no = c.band_no);

-- AFTER
SELECT nickname, gender, mice_ration "Mice after pay increase",mice_extra "Extra after pay increase"
FROM longest_memberships;

ROLLBACK;


-- TASK 33
-- a
CREATE VIEW statistics AS
SELECT
    COALESCE(stats.name, b.name) AS "BAND NAME",
    COALESCE(stats.gender, DECODE(c.gender, 'W', 'Femele cat', 'Mele cat')) AS "GENDER",
    COUNT(*) AS "HOW MANY",
    SUM(CASE WHEN c.function = 'BOSS' THEN c.mice_ration + NVL(c.mice_extra, 0) ELSE 0 END) AS "BOSS",
    SUM(CASE WHEN c.function = 'THUG' THEN c.mice_ration + NVL(c.mice_extra, 0) ELSE 0 END) AS "THUG",
    SUM(CASE WHEN c.function = 'CATCHING' THEN c.mice_ration + NVL(c.mice_extra, 0) ELSE 0 END) AS "CATCHING",
    SUM(CASE WHEN c.function = 'CATCHER' THEN c.mice_ration + NVL(c.mice_extra, 0) ELSE 0 END) AS "CATCHER",
    SUM(CASE WHEN c.function = 'CAT' THEN c.mice_ration + NVL(c.mice_extra, 0) ELSE 0 END) AS "CAT",
    SUM(CASE WHEN c.function = 'NICE' THEN c.mice_ration + NVL(c.mice_extra, 0) ELSE 0 END) AS "NICE",
    SUM(CASE WHEN c.function = 'DIVISIVE' THEN c.mice_ration + NVL(c.mice_extra, 0) ELSE 0 END) AS "DIVISIVE",
    SUM(c.mice_ration + NVL(c.mice_extra, 0)) AS "SUM"
FROM Cats c
INNER JOIN Bands b ON c.band_no = b.band_no
LEFT JOIN (
    SELECT b.name, c.gender, c.function, SUM(c.mice_ration + NVL(c.mice_extra, 0)) AS total_mice
    FROM Cats c
    INNER JOIN Bands b ON c.band_no = b.band_no
    GROUP BY b.name, c.function, c.gender
) stats ON stats.name = b.name AND stats.gender = c.gender AND stats.function = c.function
GROUP BY COALESCE(stats.name, b.name), COALESCE(stats.gender, DECODE(c.gender, 'W', 'Femele cat', 'Mele cat'))
ORDER BY "BAND NAME", "GENDER";

SELECT * FROM statistics

UNION ALL 
SELECT 'Z Eats in total',' ',COUNT(*),
SUM(CASE WHEN c.function = 'BOSS' THEN c.mice_ration + NVL(c.mice_extra, 0) ELSE 0 END) AS "BOSS",
    SUM(CASE WHEN c.function = 'THUG' THEN c.mice_ration + NVL(c.mice_extra, 0) ELSE 0 END) AS "THUG",
    SUM(CASE WHEN c.function = 'CATCHING' THEN c.mice_ration + NVL(c.mice_extra, 0) ELSE 0 END) AS "CATCHING",
    SUM(CASE WHEN c.function = 'CATCHER' THEN c.mice_ration + NVL(c.mice_extra, 0) ELSE 0 END) AS "CATCHER",
    SUM(CASE WHEN c.function = 'CAT' THEN c.mice_ration + NVL(c.mice_extra, 0) ELSE 0 END) AS "CAT",
    SUM(CASE WHEN c.function = 'NICE' THEN c.mice_ration + NVL(c.mice_extra, 0) ELSE 0 END) AS "NICE",
    SUM(CASE WHEN c.function = 'DIVISIVE' THEN c.mice_ration + NVL(c.mice_extra, 0) ELSE 0 END) AS "DIVISIVE",
    SUM(c.mice_ration + NVL(c.mice_extra, 0)) AS "SUM"
FROM Cats c
INNER JOIN Bands b ON c.band_no = b.band_no

-- TASK 33b
SELECT * FROM (
  SELECT 
    TO_CHAR(BBN) "BANDS NAME",
    TO_CHAR(DECODE(gender, 'M', 'MALE', 'FEMALE') || ' CAT') "GENDER",
    TO_CHAR(HOW_MUCH) "HOW MUCH",
    TO_CHAR(NVL(BOSS, 0)) "BOSS",
    TO_CHAR(NVL(THUG, 0)) "THUG",
    TO_CHAR(NVL(CATCHING, 0)) "CATCHING",
    TO_CHAR(NVL(CATCHER, 0)) "CATCHER",
    TO_CHAR(NVL(CAT, 0)) "CAT",
    TO_CHAR(NVL(NICE, 0)) "NICE",
    TO_CHAR(NVL(DIVISIVE, 0)) "DIVISIVE",
    TO_CHAR(NVL(THIER_SUM, 0)) "SUM"
  FROM
  (
    SELECT Bands.name "BBN", gender, function, NVL(mice_ration, 0) + NVL(mice_extra, 0) ct
    FROM Cats JOIN Bands ON Cats.band_no = Bands.band_no
  ) PIVOT (
      SUM(ct) FOR function IN (
      'BOSS' BOSS, 'THUG' THUG, 'CATCHING' CATCHING, 'CATCHER' CATCHER,
      'CAT' CAT, 'NICE' NICE, 'DIVISIVE' DIVISIVE
    )
  ) JOIN (
    SELECT B.name "BN", gender "G", COUNT(nickname) "HOW_MUCH", SUM(NVL(mice_ration, 0) + NVL(mice_extra, 0)) THIER_SUM
    FROM Cats C JOIN Bands B ON C.band_no = B.band_no
    GROUP BY B.name, gender
    ORDER BY B.name
  ) ON BN = BBN AND G = gender
) 


UNION ALL


SELECT  'Eats in total',
        ' ',
        ' ',
        TO_CHAR(NVL(BOSS, 0)) BOSS,
        TO_CHAR(NVL(THUG, 0)) THUG,
        TO_CHAR(NVL(CATCHING, 0)) CATCHING,
        TO_CHAR(NVL(CATCHER, 0)) CATCHER,
        TO_CHAR(NVL(CAT, 0)) CAT,
        TO_CHAR(NVL(NICE, 0)) NICE,
        TO_CHAR(NVL(DIVISIVE, 0)) DIVISIVE,
        TO_CHAR(NVL(THIER_SUM, 0)) "SUM"
FROM
(
  SELECT function, NVL(mice_ration, 0) + NVL(mice_extra, 0) ct, (SELECT SUM(NVL(mice_ration, 0) + NVL(mice_extra, 0)) FROM Cats) THIER_SUM
  FROM Cats JOIN Bands ON Cats.band_no = Bands.band_no
) PIVOT (
    SUM(ct) FOR function IN (
    'BOSS' BOSS, 'THUG' THUG, 'CATCHING' CATCHING, 'CATCHER' CATCHER,
    'CAT' CAT, 'NICE' NICE, 'DIVISIVE' DIVISIVE
  )
);





